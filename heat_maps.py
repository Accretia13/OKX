import pandas as pd
import numpy as np
import os
import glob
from openpyxl import load_workbook
from openpyxl.formatting.rule import ColorScaleRule
from openpyxl.styles import Border, Side, PatternFill
from openpyxl.utils import get_column_letter

def col_letter(n):
    result = ""
    while n:
        n, r = divmod(n - 1, 26)
        result = chr(65 + r) + result
    return result

OTHER_TF = r"C:\Users\777\PycharmProjects\pythonProject\otherTF"
WARM_MAPS = r"C:\Users\777\PycharmProjects\pythonProject\WarmMaps"
os.makedirs(WARM_MAPS, exist_ok=True)

print("üîç –°–∫–∞–Ω–∏—Ä—É–µ–º –ø–∞–ø–∫–∏ —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...")
h1_files = glob.glob(os.path.join(OTHER_TF, "*_H1.txt"))
d1_files = glob.glob(os.path.join(OTHER_TF, "*_D1.txt"))
tickers = set(os.path.basename(f).split("_")[0] for f in h1_files + d1_files)
print(f"–ù–∞–π–¥–µ–Ω–æ —Ç–∏–∫–µ—Ä–æ–≤: {len(tickers)} -> {sorted(tickers)}")

if not tickers:
    print("‚ùó –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏. –í—ã—Ö–æ–¥.")
    exit()

# 1) –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∞–π–ª RESULT_HEAT_MAP.xlsx —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ –ª–∏—Å—Ç–∞–º–∏ D1 –∏ H1 —É –∫–∞–∂–¥–æ–≥–æ —Ç–∏–∫–µ—Ä–∞
combined_path = os.path.join(WARM_MAPS, "RESULT_HEAT_MAP.xlsx")
print(f"üìÇ –ì–æ—Ç–æ–≤–∏–º —Ñ–∞–π–ª: {combined_path}")

pivots = {}

with pd.ExcelWriter(combined_path, engine="openpyxl") as writer:
    for ticker in sorted(tickers):
        print(f"\nüîµ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–∏–∫–µ—Ä: {ticker}")
        h1_file = next((f for f in h1_files if os.path.basename(f).startswith(ticker)), None)
        d1_file = next((f for f in d1_files if os.path.basename(f).startswith(ticker)), None)
        if not h1_file or not d1_file:
            print(f"  ‚ùå –ü—Ä–æ–ø—É—Å–∫: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç H1 –∏–ª–∏ D1 —Ñ–∞–π–ª—ã –¥–ª—è {ticker}")
            continue

        # –ß–∏—Ç–∞–µ–º D1
        print(f"  üì• –ß–∏—Ç–∞–µ–º D1: {os.path.basename(d1_file)}")
        d1 = pd.read_csv(
            d1_file,
            skiprows=1,
            names=['ticker','per','date','time','open','high','low','close','vol']
        )
        for col in ['open','high','low','close','vol']:
            d1[col] = pd.to_numeric(d1[col], errors='coerce')
        d1.dropna(subset=['open','high','low','close'], inplace=True)
        d1['datetime'] = pd.to_datetime(
            d1['date'].astype(str).str.zfill(8) + d1['time'].astype(str).str.zfill(6),
            format='%Y%m%d%H%M%S'
        )
        d1.sort_values('datetime', inplace=True)
        d1['ampl_pct'] = 2 * (d1['high'] - d1['low']) / (d1['high'] + d1['low']) * 100
        print(f"    ‚úî D1 –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {len(d1)} —Å—Ç—Ä–æ–∫")

        # –ß–∏—Ç–∞–µ–º H1
        print(f"  üì• –ß–∏—Ç–∞–µ–º H1: {os.path.basename(h1_file)}")
        h1 = pd.read_csv(
            h1_file,
            skiprows=1,
            names=['ticker','per','date','time','open','high','low','close','vol']
        )
        for col in ['open','high','low','close','vol']:
            h1[col] = pd.to_numeric(h1[col], errors='coerce')
        h1.dropna(subset=['open','high','low','close'], inplace=True)
        h1['datetime'] = pd.to_datetime(
            h1['date'].astype(str).str.zfill(8) + h1['time'].astype(str).str.zfill(6),
            format='%Y%m%d%H%M%S'
        )
        h1.sort_values('datetime', inplace=True)
        h1['ampl_pct'] = 2 * (h1['high'] - h1['low']) / (h1['high'] + h1['low']) * 100
        h1['hour'] = h1['datetime'].dt.strftime('%H:%M')
        h1['weekday'] = (h1['datetime'] - pd.Timedelta(hours=3)).dt.weekday
        h1['weekday_name'] = h1['weekday'].map({0:'–ü–Ω', 1:'–í—Ç', 2:'–°—Ä', 3:'–ß—Ç', 4:'–ü—Ç', 5:'–°–±', 6:'–í—Å'})
        print(f"    ‚úî H1 –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {len(h1)} —Å—Ç—Ä–æ–∫")

        # –§–æ—Ä–º–∏—Ä—É–µ–º pivot-—Ç–∞–±–ª–∏—Ü—É
        hour_list = [f"{h:02d}:00" for h in list(range(3,24)) + list(range(0,3))]
        print("  üîÑ –§–æ—Ä–º–∏—Ä—É–µ–º pivot-—Ç–∞–±–ª–∏—Ü—É")
        pivot = h1.pivot_table(
            index='weekday_name',
            columns='hour',
            values='ampl_pct',
            aggfunc='mean'
        ).reindex(index=['–ü–Ω','–í—Ç','–°—Ä','–ß—Ç','–ü—Ç','–°–±','–í—Å'], columns=hour_list)
        print("    ‚úî Pivot —Å–æ–∑–¥–∞–Ω")

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –∏ —Å—Ç–æ–ª–±—Ü—ã —Å–æ –°—Ä–µ–¥–Ω–∏–º –∏ –ú–µ–¥–∏–∞–Ω–æ–π
        print("  ‚ûï –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏/—Å—Ç–æ–ª–±—Ü—ã –°—Ä–µ–¥–Ω–µ–µ/–ú–µ–¥–∏–∞–Ω–∞")
        data_cols = len(hour_list)

        col_means = pivot.iloc[:, :data_cols].mean()
        col_meds  = pivot.iloc[:, :data_cols].median()

        pivot.loc['–°—Ä–µ–¥–Ω–µ–µ'] = col_means
        pivot.loc['–ú–µ–¥–∏–∞–Ω–∞'] = col_meds

        pivot['–°—Ä–µ–¥–Ω–µ–µ'] = pivot.iloc[:, :data_cols].mean(axis=1)
        pivot['–ú–µ–¥–∏–∞–Ω–∞'] = pivot.iloc[:, :data_cols].median(axis=1)

        overall_mean   = pivot.iloc[:-2, :data_cols].values.mean()
        overall_median = np.median(pivot.iloc[:-2, :data_cols].values.flatten())
        pivot.at['–°—Ä–µ–¥–Ω–µ–µ', '–°—Ä–µ–¥–Ω–µ–µ'] = overall_mean
        pivot.at['–ú–µ–¥–∏–∞–Ω–∞', '–ú–µ–¥–∏–∞–Ω–∞'] = overall_median
        print("    ‚úî –°—Ä–µ–¥–Ω–µ–µ/–ú–µ–¥–∏–∞–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω—ã")

        pivots[ticker] = pivot.copy()

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ª–∏—Å—Ç—ã D1 –∏ H1
        d1_sheet = f"{ticker}_D1"
        h1_sheet = f"{ticker}_H1"
        print(f"  üíæ –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ª–∏—Å—Ç—ã: {d1_sheet}, {h1_sheet}")
        d1[['datetime','open','high','low','close','ampl_pct']].to_excel(writer, sheet_name=d1_sheet, index=False)
        pivot.to_excel(writer, sheet_name=h1_sheet)
        print("    ‚úî –õ–∏—Å—Ç—ã –∑–∞–ø–∏—Å–∞–Ω—ã")

print("\n‚úÖ RESULT_HEAT_MAP.xlsx —Å–æ–∑–¥–∞–Ω")

# 2) –ü—Ä–∏–º–µ–Ω—è–µ–º —É—Å–ª–æ–≤–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (—Å–≤–µ—Ç–ª–æ-—Å–∏–Ω–∏–π‚Üí–±–µ–ª—ã–π‚Üí–∫—Ä–∞—Å–Ω—ã–π) –≤ RESULT_HEAT_MAP.xlsx
print("üîß –ù–∞–ª–æ–∂–µ–Ω–∏–µ —É—Å–ª–æ–≤–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ RESULT_HEAT_MAP.xlsx...")
wb = load_workbook(combined_path)
for ticker, pivot in pivots.items():
    h1_sheet = f"{ticker}_H1"
    if h1_sheet not in wb.sheetnames:
        print(f"  ‚ö†Ô∏è –õ–∏—Å—Ç {h1_sheet} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫")
        continue
    ws = wb[h1_sheet]
    data_rows = 7
    data_cols = len(hour_list)
    start_col = 2
    start_row = 2

    # 1) –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å
    data_start = f"{col_letter(start_col)}{start_row}"
    data_end   = f"{col_letter(start_col + data_cols - 1)}{start_row + data_rows - 1}"
    data_range = f"{data_start}:{data_end}"
    rule_main = ColorScaleRule(
        start_type='min', start_color='ADD8E6',   # —Å–≤–µ—Ç–ª–æ-—Å–∏–Ω–∏–π = –º–∏–Ω–∏–º—É–º
        mid_type='percentile', mid_value=50, mid_color='FFFFFF',
        end_type='max', end_color='FF0000'        # –∫—Ä–∞—Å–Ω—ã–π = –º–∞–∫—Å–∏–º—É–º
    )
    ws.conditional_formatting.add(data_range, rule_main)

    # 2) –°—Ç—Ä–æ–∫–∏ ¬´–°—Ä–µ–¥–Ω–µ–µ¬ª –∏ ¬´–ú–µ–¥–∏–∞–Ω–∞¬ª
    row_mean = start_row + data_rows
    row_med  = row_mean + 1
    summary_row1 = f"{col_letter(start_col)}{row_mean}:{col_letter(start_col + data_cols + 1)}{row_mean}"
    summary_row2 = f"{col_letter(start_col)}{row_med}:{col_letter(start_col + data_cols + 1)}{row_med}"
    rule_rows = ColorScaleRule(
        start_type='min', start_color='ADD8E6',
        mid_type='percentile', mid_value=50, mid_color='FFFFFF',
        end_type='max', end_color='FF0000'
    )
    ws.conditional_formatting.add(summary_row1, rule_rows)
    ws.conditional_formatting.add(summary_row2, rule_rows)

    # 3) –°—Ç–æ–ª–±—Ü—ã ¬´–°—Ä–µ–¥–Ω–µ–µ¬ª –∏ ¬´–ú–µ–¥–∏–∞–Ω–∞¬ª
    col_mean = start_col + data_cols
    col_med  = col_mean + 1
    letter_mean = col_letter(col_mean)
    letter_med  = col_letter(col_med)
    summary_col1 = f"{letter_mean}{start_row}:{letter_mean}{start_row + data_rows - 1}"
    summary_col2 = f"{letter_med}{start_row}:{letter_med}{start_row + data_rows - 1}"
    rule_cols = ColorScaleRule(
        start_type='min', start_color='ADD8E6',
        mid_type='percentile', mid_value=50, mid_color='FFFFFF',
        end_type='max', end_color='FF0000'
    )
    ws.conditional_formatting.add(summary_col1, rule_cols)
    ws.conditional_formatting.add(summary_col2, rule_cols)

wb.save(combined_path)
print("‚úÖ –£—Å–ª–æ–≤–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è RESULT_HEAT_MAP.xlsx –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

# 3) –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ pivot-—Ç–∞–±–ª–∏—Ü—ã –ø–æ–¥—Ä—è–¥ –≤ –æ–¥–∏–Ω –ª–∏—Å—Ç SUMMARY_TICKERS.xlsx
summary_all_path = os.path.join(WARM_MAPS, "SUMMARY_TICKERS.xlsx")
print(f"\nüìÇ –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ pivot-—Ç–∞–±–ª–∏—Ü—ã –≤ –æ–¥–∏–Ω –ª–∏—Å—Ç: {summary_all_path}")
with pd.ExcelWriter(summary_all_path, engine="openpyxl") as writer:
    sheet_name = "All_H1"
    current_row = 0
    for ticker, pivot in pivots.items():
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–º–µ–Ω–µ–º —Ç–∏–∫–µ—Ä–∞
        df_header = pd.DataFrame([[ticker]], columns=[f"{ticker}_H1"])
        df_header.to_excel(writer, sheet_name=sheet_name, startrow=current_row, index=False, header=False)
        current_row += 1

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º pivot-—Ç–∞–±–ª–∏—Ü—É –ø–æ–¥ —ç—Ç–∏–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
        pivot.to_excel(writer, sheet_name=sheet_name, startrow=current_row, startcol=0)
        rows, cols = pivot.shape
        current_row += rows + 2  # +1 —Å—Ç—Ä–æ–∫–∞ pivot –∏ +1 –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞

print("‚úÖ SUMMARY_TICKERS.xlsx —Å–æ–∑–¥–∞–Ω (–±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)")

# 4) –ü—Ä–∏–º–µ–Ω—è–µ–º —É—Å–ª–æ–≤–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (—Å–≤–µ—Ç–ª–æ-—Å–∏–Ω–∏–π‚Üí–±–µ–ª—ã–π‚Üí–∫—Ä–∞—Å–Ω—ã–π) –≤ SUMMARY_TICKERS.xlsx
print("üîß –ü—Ä–∏–º–µ–Ω—è–µ–º —É—Å–ª–æ–≤–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ SUMMARY_TICKERS.xlsx...")
wb2 = load_workbook(summary_all_path)
ws2 = wb2["All_H1"]

current_row = 1
for ticker, pivot in pivots.items():
    rows, total_cols = pivot.shape
    data_cols = total_cols - 2
    start_col = 2
    start_row = current_row + 1

    # 4.1) –û—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫
    data_start = f"{col_letter(start_col)}{start_row}"
    data_end   = f"{col_letter(start_col + data_cols - 1)}{start_row + 6}"
    data_range = f"{data_start}:{data_end}"
    rule_main2 = ColorScaleRule(
        start_type='min', start_color='ADD8E6',
        mid_type='percentile', mid_value=50, mid_color='FFFFFF',
        end_type='max', end_color='FF0000'
    )
    ws2.conditional_formatting.add(data_range, rule_main2)

    # 4.2) –°—Ç—Ä–æ–∫–∏ ¬´–°—Ä–µ–¥–Ω–µ–µ¬ª –∏ ¬´–ú–µ–¥–∏–∞–Ω–∞¬ª
    row_mean = start_row + 7
    row_med  = row_mean + 1
    summary_row1 = f"{col_letter(start_col)}{row_mean}:{col_letter(start_col + data_cols + 1)}{row_mean}"
    summary_row2 = f"{col_letter(start_col)}{row_med}:{col_letter(start_col + data_cols + 1)}{row_med}"
    rule_rows2 = ColorScaleRule(
        start_type='min', start_color='ADD8E6',
        mid_type='percentile', mid_value=50, mid_color='FFFFFF',
        end_type='max', end_color='FF0000'
    )
    ws2.conditional_formatting.add(summary_row1, rule_rows2)
    ws2.conditional_formatting.add(summary_row2, rule_rows2)

    # 4.3) –°—Ç–æ–ª–±—Ü—ã ¬´–°—Ä–µ–¥–Ω–µ–µ¬ª –∏ ¬´–ú–µ–¥–∏–∞–Ω–∞¬ª
    col_mean = start_col + data_cols
    col_med  = col_mean + 1
    letter_mean = col_letter(col_mean)
    letter_med  = col_letter(col_med)
    summary_col1 = f"{letter_mean}{start_row}:{letter_mean}{start_row + 6}"
    summary_col2 = f"{letter_med}{start_row}:{letter_med}{start_row + 6}"
    rule_cols2 = ColorScaleRule(
        start_type='min', start_color='ADD8E6',
        mid_type='percentile', mid_value=50, mid_color='FFFFFF',
        end_type='max', end_color='FF0000'
    )
    ws2.conditional_formatting.add(summary_col1, rule_cols2)
    ws2.conditional_formatting.add(summary_col2, rule_cols2)

    current_row += rows + 2 + 1

wb2.save(summary_all_path)
print("‚úÖ –£—Å–ª–æ–≤–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è SUMMARY_TICKERS.xlsx –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

# 5) –ù–∞–Ω–æ—Å–∏–º —Ç–æ–ª—Å—Ç—ã–µ —Ä–∞–º–∫–∏ –¥–ª—è —Å—Ç—Ä–æ–∫ ¬´–°—Ä–µ–¥–Ω–µ–µ¬ª –∏ ¬´–ú–µ–¥–∏–∞–Ω–∞¬ª, –æ–±–≤–æ–¥–∏–º –∏ —Å—Ç–æ–ª–±—Ü—ã, –∏ —Å—Ç—Ä–æ–∫–∏;
#    –∞ —Ç–∞–∫–∂–µ –∑–∞–ª–∏–≤–∞–µ–º –∂–µ–ª—Ç—ã–º —Ü–≤–µ—Ç–æ–º —Å–∞–º—É—é –ø—Ä–∞–≤—É—é –Ω–∏–∂–Ω—é—é —è—á–µ–π–∫—É –∫–∞–∂–¥–æ–≥–æ –ª–∏—Å—Ç–∞

# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ ¬´—Ç–æ–ª—Å—Ç–æ–π¬ª —Ä–∞–º–∫–∏ –∏ –∂—ë–ª—Ç–æ–π –∑–∞–ª–∏–≤–∫–∏
thick = Side(border_style="thick", color="000000")
border_thick = Border(top=thick, left=thick, right=thick, bottom=thick)
yellow_fill = PatternFill(fill_type="solid", fgColor="FFFF00")

# –†–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ SUMMARY_TICKERS.xlsx
print("üîß –ù–∞–Ω–æ—Å–∏–º —Ä–∞–º–∫–∏ –∏ –∑–∞–ª–∏–≤–∞–µ–º –∂—ë–ª—Ç—ã–º –≤ SUMMARY_TICKERS.xlsx...")
wb3 = load_workbook(summary_all_path)

for sheetname in wb3.sheetnames:
    ws = wb3[sheetname]
    print(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–∏—Å—Ç: {sheetname}")
    max_row = ws.max_row
    max_col = ws.max_column

    # 5.1) –û–±–≤–æ–¥–∏–º —Å—Ç—Ä–æ–∫–∏, –≥–¥–µ –µ—Å—Ç—å ¬´–°—Ä–µ–¥–Ω–µ–µ¬ª –∏–ª–∏ ¬´–ú–µ–¥–∏–∞–Ω–∞¬ª
    for row in ws.iter_rows(min_row=1, max_row=max_row, min_col=1, max_col=max_col):
        found = False
        for cell in row:
            if isinstance(cell.value, str) and cell.value.strip() in ("–°—Ä–µ–¥–Ω–µ–µ", "–ú–µ–¥–∏–∞–Ω–∞"):
                found = True
                break
        if not found:
            continue

        row_idx = row[0].row
        for col_idx in range(1, max_col + 1):
            ws.cell(row=row_idx, column=col_idx).border = border_thick

    # 5.2) –û–±–≤–æ–¥–∏–º —Å—Ç–æ–ª–±—Ü—ã, –≥–¥–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ ‚Äî ¬´–°—Ä–µ–¥–Ω–µ–µ¬ª –∏–ª–∏ ¬´–ú–µ–¥–∏–∞–Ω–∞¬ª
    #      –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–æ–∏—Ç –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ (–∏–ª–∏ –ø–µ—Ä–≤–æ–π –Ω–µ–ø—É—Å—Ç–æ–π).
    #      –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –∏–Ω–æ–π, –ø–æ–¥–ø—Ä–∞–≤—å—Ç–µ min_row.
    for col_idx in range(1, max_col + 1):
        header_val = ws.cell(row=1, column=col_idx).value
        if isinstance(header_val, str) and header_val.strip() in ("–°—Ä–µ–¥–Ω–µ–µ", "–ú–µ–¥–∏–∞–Ω–∞"):
            for row_idx in range(1, max_row + 1):
                ws.cell(row=row_idx, column=col_idx).border = border_thick

wb3.save(summary_all_path)
print("‚úÖ –†–∞–º–∫–∏ –∏ –∑–∞–ª–∏–≤–∫–∞ –≤ SUMMARY_TICKERS.xlsx –∑–∞–≤–µ—Ä—à–µ–Ω—ã")

